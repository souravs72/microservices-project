version: "3.8"

services:
  # Database Services
  postgres-auth:
    image: postgres:15-alpine
    container_name: postgres-auth-dev
    environment:
      POSTGRES_DB: authdb
      POSTGRES_USER: authuser
      POSTGRES_PASSWORD: ${DB_PASSWORD:-devpassword123}
    volumes:
      - auth_db_data_dev:/var/lib/postgresql/data
    ports:
      - "5436:5432"
    networks:
      - microservices-network

  postgres-user:
    image: postgres:15-alpine
    container_name: postgres-user-dev
    environment:
      POSTGRES_DB: userdb
      POSTGRES_USER: useruser
      POSTGRES_PASSWORD: ${DB_PASSWORD:-devpassword123}
    volumes:
      - user_db_data_dev:/var/lib/postgresql/data
    ports:
      - "5433:5432"
    networks:
      - microservices-network

  postgres-notification:
    image: postgres:15-alpine
    container_name: postgres-notification-dev
    environment:
      POSTGRES_DB: notificationdb
      POSTGRES_USER: notificationuser
      POSTGRES_PASSWORD: ${DB_PASSWORD:-devpassword123}
    volumes:
      - notification_db_data_dev:/var/lib/postgresql/data
    ports:
      - "5434:5432"
    networks:
      - microservices-network

  # Redis Service
  redis:
    image: redis:7-alpine
    container_name: redis-dev
    command: redis-server --requirepass ${REDIS_PASSWORD:-devredis123}
    ports:
      - "6379:6379"
    volumes:
      - redis_data_dev:/data
    networks:
      - microservices-network

  # Kafka Service
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: zookeeper-dev
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - microservices-network

  kafka:
    image: confluentinc/cp-kafka:7.4.0
    container_name: kafka-dev
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
    volumes:
      - kafka_data_dev:/var/lib/kafka/data
    networks:
      - microservices-network

  # Auth Service
  auth-service:
    build:
      context: .
      dockerfile: auth-service/Dockerfile
    container_name: auth-service-dev
    ports:
      - "8082:8082"
    environment:
      - SPRING_PROFILES_ACTIVE=dev
      - DB_URL=jdbc:postgresql://postgres-auth:5432/authdb
      - DB_USERNAME=authuser
      - DB_PASSWORD=${DB_PASSWORD:-devpassword123}
      - REDIS_HOST=redis
      - REDIS_PASSWORD=${REDIS_PASSWORD:-devredis123}
      - KAFKA_BOOTSTRAP_SERVERS=kafka:29092
      - JWT_SECRET=${JWT_SECRET:-dev-jwt-secret-key-change-in-production}
      - MAIL_USERNAME=${MAIL_USERNAME:-test@example.com}
      - MAIL_PASSWORD=${MAIL_PASSWORD:-testpassword}
    depends_on:
      - postgres-auth
      - redis
      - kafka
    networks:
      - microservices-network

  # User Service
  user-service:
    build:
      context: .
      dockerfile: user-service/Dockerfile
    container_name: user-service-dev
    ports:
      - "8081:8081"
    environment:
      - SPRING_PROFILES_ACTIVE=dev
      - DB_URL=jdbc:postgresql://postgres-user:5432/userdb
      - DB_USERNAME=useruser
      - DB_PASSWORD=${DB_PASSWORD:-devpassword123}
      - REDIS_HOST=redis
      - REDIS_PASSWORD=${REDIS_PASSWORD:-devredis123}
      - KAFKA_BOOTSTRAP_SERVERS=kafka:29092
      - AUTH_SERVICE_URL=http://auth-service:8082
      - INTERNAL_API_KEY=${INTERNAL_API_KEY:-dev-internal-api-key}
      - JWT_SECRET=${JWT_SECRET:-dev-jwt-secret-key-change-in-production}
    depends_on:
      - postgres-user
      - redis
      - kafka
      - auth-service
    networks:
      - microservices-network

  # Notification Service
  notification-service:
    build:
      context: .
      dockerfile: notification-service/Dockerfile
    container_name: notification-service-dev
    ports:
      - "8085:8085"
    environment:
      - SPRING_PROFILES_ACTIVE=dev
      - DB_URL=jdbc:postgresql://postgres-notification:5432/notificationdb
      - DB_USERNAME=notificationuser
      - DB_PASSWORD=${DB_PASSWORD:-devpassword123}
      - REDIS_HOST=redis
      - REDIS_PASSWORD=${REDIS_PASSWORD:-devredis123}
      - KAFKA_BOOTSTRAP_SERVERS=kafka:29092
      - MAIL_USERNAME=${MAIL_USERNAME:-test@example.com}
      - MAIL_PASSWORD=${MAIL_PASSWORD:-testpassword}
      - ADMIN_USERNAME=${ADMIN_USERNAME:-admin}
      - ADMIN_PASSWORD=${ADMIN_PASSWORD:-admin123}
    depends_on:
      - postgres-notification
      - redis
      - kafka
    networks:
      - microservices-network

  # API Gateway
  api-gateway:
    build:
      context: .
      dockerfile: api-gateway/Dockerfile
    container_name: api-gateway-dev
    ports:
      - "8080:8080"
    environment:
      - SPRING_PROFILES_ACTIVE=dev
      - REDIS_HOST=redis
      - REDIS_PASSWORD=${REDIS_PASSWORD:-devredis123}
    depends_on:
      - auth-service
      - user-service
      - notification-service
      - redis
    networks:
      - microservices-network

volumes:
  auth_db_data_dev:
  user_db_data_dev:
  notification_db_data_dev:
  redis_data_dev:
  kafka_data_dev:

networks:
  microservices-network:
    driver: bridge
