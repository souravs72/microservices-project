{
  "info": {
    "name": "Microservices Platform API",
    "description": "Comprehensive API collection for the Microservices Platform including Auth Service, User Service, Notification Service, and API Gateway endpoints.",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "version": {
      "major": 1,
      "minor": 0,
      "patch": 0
    }
  },
  "auth": {
    "type": "bearer",
    "bearer": [
      {
        "key": "token",
        "value": "{{jwt_token}}",
        "type": "string"
      }
    ]
  },
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Auto-set common headers",
          "pm.request.headers.add({",
          "    key: 'Content-Type',",
          "    value: 'application/json'",
          "});",
          "",
          "// Add timestamp for logging",
          "pm.globals.set('timestamp', new Date().toISOString());"
        ]
      }
    },
    {
      "listen": "test",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Auto-save JWT token from login responses",
          "if (pm.response.json() && pm.response.json().token) {",
          "    pm.globals.set('jwt_token', pm.response.json().token);",
          "    console.log('JWT token saved to global variable');",
          "}",
          "",
          "// Auto-save access token from auth responses",
          "if (pm.response.json() && pm.response.json().accessToken) {",
          "    pm.globals.set('jwt_token', pm.response.json().accessToken);",
          "    console.log('Access token saved to global variable');",
          "}"
        ]
      }
    }
  ],
  "variable": [
    {
      "key": "base_url",
      "value": "http://localhost:8080",
      "type": "string"
    },
    {
      "key": "auth_service_url",
      "value": "http://localhost:8082",
      "type": "string"
    },
    {
      "key": "user_service_url",
      "value": "http://localhost:8081",
      "type": "string"
    },
    {
      "key": "notification_service_url",
      "value": "http://localhost:8085",
      "type": "string"
    },
    {
      "key": "jwt_token",
      "value": "",
      "type": "string"
    }
  ],
  "item": [
    {
      "name": "Authentication Service",
      "description": "User authentication, registration, and token management endpoints",
      "item": [
        {
          "name": "User Registration",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "User-Agent",
                "value": "Postman/{{$timestamp}}",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"username\": \"newuser\",\n  \"email\": \"newuser@example.com\",\n  \"password\": \"{{test_password}}\",\n  \"firstName\": \"John\",\n  \"lastName\": \"Doe\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/auth/register",
              "host": ["{{base_url}}"],
              "path": ["api", "auth", "register"]
            },
            "description": "Register a new user account. Returns JWT tokens upon successful registration."
          },
          "response": [
            {
              "name": "Successful Registration",
              "originalRequest": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"username\": \"newuser\",\n  \"email\": \"newuser@example.com\",\n  \"password\": \"{{test_password}}\",\n  \"firstName\": \"John\",\n  \"lastName\": \"Doe\"\n}"
                },
                "url": {
                  "raw": "{{base_url}}/api/auth/register",
                  "host": ["{{base_url}}"],
                  "path": ["api", "auth", "register"]
                }
              },
              "status": "Created",
              "code": 201,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "body": "{\n  \"accessToken\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...\",\n  \"refreshToken\": \"refresh_token_here\",\n  \"tokenType\": \"Bearer\",\n  \"username\": \"newuser\",\n  \"email\": \"newuser@example.com\",\n  \"role\": \"USER\"\n}"
            }
          ]
        },
        {
          "name": "User Login",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"username\": \"admin\",\n  \"password\": \"admin123\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/auth/login",
              "host": ["{{base_url}}"],
              "path": ["api", "auth", "login"]
            },
            "description": "Authenticate user and receive JWT tokens. Use the returned accessToken for subsequent authenticated requests."
          },
          "response": [
            {
              "name": "Successful Login",
              "originalRequest": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"username\": \"admin\",\n  \"password\": \"admin123\"\n}"
                },
                "url": {
                  "raw": "{{base_url}}/api/auth/login",
                  "host": ["{{base_url}}"],
                  "path": ["api", "auth", "login"]
                }
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "body": "{\n  \"accessToken\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...\",\n  \"refreshToken\": \"refresh_token_here\",\n  \"tokenType\": \"Bearer\",\n  \"username\": \"admin\",\n  \"email\": \"admin@example.com\",\n  \"role\": \"ADMIN\"\n}"
            }
          ]
        },
        {
          "name": "Refresh Token",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"refreshToken\": \"{{refresh_token}}\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/auth/refresh",
              "host": ["{{base_url}}"],
              "path": ["api", "auth", "refresh"]
            },
            "description": "Refresh an expired access token using a valid refresh token."
          }
        },
        {
          "name": "Validate Token",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"token\": \"{{jwt_token}}\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/auth/validate",
              "host": ["{{base_url}}"],
              "path": ["api", "auth", "validate"]
            },
            "description": "Validate a JWT token and get user information."
          }
        },
        {
          "name": "Forgot Password",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"user@example.com\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/auth/forgot-password",
              "host": ["{{base_url}}"],
              "path": ["api", "auth", "forgot-password"]
            },
            "description": "Request a password reset email. If the email exists, a reset link will be sent."
          }
        },
        {
          "name": "Reset Password",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"token\": \"reset_token_from_email\",\n  \"newPassword\": \"{{test_password}}\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/auth/reset-password",
              "host": ["{{base_url}}"],
              "path": ["api", "auth", "reset-password"]
            },
            "description": "Reset password using token from email."
          }
        },
        {
          "name": "Logout",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"refreshToken\": \"{{refresh_token}}\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/auth/logout",
              "host": ["{{base_url}}"],
              "path": ["api", "auth", "logout"]
            },
            "description": "Logout user and invalidate refresh token."
          }
        },
        {
          "name": "Auth Service Health",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/auth/health",
              "host": ["{{base_url}}"],
              "path": ["api", "auth", "health"]
            },
            "description": "Check authentication service health status."
          }
        }
      ]
    },
    {
      "name": "User Service",
      "description": "User management and profile operations",
      "item": [
        {
          "name": "Get All Users",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{jwt_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/users",
              "host": ["{{base_url}}"],
              "path": ["api", "users"]
            },
            "description": "Get all users (Admin only). Returns a list of all users in the system."
          },
          "response": [
            {
              "name": "All Users Response",
              "originalRequest": {
                "method": "GET",
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{jwt_token}}"
                  }
                ],
                "url": {
                  "raw": "{{base_url}}/api/users",
                  "host": ["{{base_url}}"],
                  "path": ["api", "users"]
                }
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "body": "[\n  {\n    \"id\": 1,\n    \"username\": \"admin\",\n    \"email\": \"admin@example.com\",\n    \"firstName\": \"Admin\",\n    \"lastName\": \"User\",\n    \"roles\": [\"ADMIN\"],\n    \"createdAt\": \"2025-01-01T00:00:00Z\",\n    \"updatedAt\": \"2025-01-01T00:00:00Z\",\n    \"isActive\": true\n  }\n]"
            }
          ]
        },
        {
          "name": "Get User by ID",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{jwt_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/users/1",
              "host": ["{{base_url}}"],
              "path": ["api", "users", "1"]
            },
            "description": "Get a specific user by their ID."
          }
        },
        {
          "name": "Get User by Username",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{jwt_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/users/username/admin",
              "host": ["{{base_url}}"],
              "path": ["api", "users", "username", "admin"]
            },
            "description": "Get a specific user by their username."
          }
        },
        {
          "name": "Create User",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{jwt_token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"username\": \"newuser\",\n  \"email\": \"newuser@example.com\",\n  \"firstName\": \"John\",\n  \"lastName\": \"Doe\",\n  \"password\": \"Password123!\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/users",
              "host": ["{{base_url}}"],
              "path": ["api", "users"]
            },
            "description": "Create a new user (Admin only)."
          }
        },
        {
          "name": "Update User",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{jwt_token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"firstName\": \"Updated\",\n  \"lastName\": \"Name\",\n  \"email\": \"updated@example.com\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/users/1",
              "host": ["{{base_url}}"],
              "path": ["api", "users", "1"]
            },
            "description": "Update user information. Users can update their own profile."
          }
        },
        {
          "name": "Delete User",
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{jwt_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/users/1",
              "host": ["{{base_url}}"],
              "path": ["api", "users", "1"]
            },
            "description": "Delete a user (Admin only)."
          }
        },
        {
          "name": "Sync User (Internal)",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "X-Internal-API-Key",
                "value": "{{internal_api_key}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"username\": \"synceduser\",\n  \"email\": \"synceduser@example.com\",\n  \"firstName\": \"Synced\",\n  \"lastName\": \"User\",\n  \"password\": \"{{test_password}}\"\n}"
            },
            "url": {
              "raw": "{{user_service_url}}/api/users/sync",
              "host": ["{{user_service_url}}"],
              "path": ["api", "users", "sync"]
            },
            "description": "Internal endpoint for syncing user creation between services."
          }
        }
      ]
    },
    {
      "name": "Notification Service",
      "description": "Email notifications and notification management",
      "item": [
        {
          "name": "Get Notification History",
          "request": {
            "auth": {
              "type": "basic",
              "basic": [
                {
                  "key": "username",
                  "value": "admin",
                  "type": "string"
                },
                {
                  "key": "password",
                  "value": "{{admin_password}}",
                  "type": "string"
                }
              ]
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{notification_service_url}}/api/notifications/history?email=user@example.com&status=SENT",
              "host": ["{{notification_service_url}}"],
              "path": ["api", "notifications", "history"],
              "query": [
                {
                  "key": "email",
                  "value": "user@example.com",
                  "description": "Filter by recipient email"
                },
                {
                  "key": "status",
                  "value": "SENT",
                  "description": "Filter by notification status (SENT, FAILED, PENDING)"
                }
              ]
            },
            "description": "Get notification history with optional filtering by email and status."
          }
        },
        {
          "name": "Get Notification Statistics",
          "request": {
            "auth": {
              "type": "basic",
              "basic": [
                {
                  "key": "username",
                  "value": "admin",
                  "type": "string"
                },
                {
                  "key": "password",
                  "value": "{{admin_password}}",
                  "type": "string"
                }
              ]
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{notification_service_url}}/api/notifications/stats",
              "host": ["{{notification_service_url}}"],
              "path": ["api", "notifications", "stats"]
            },
            "description": "Get notification statistics including total, sent, and failed counts."
          }
        },
        {
          "name": "Get Notification by ID",
          "request": {
            "auth": {
              "type": "basic",
              "basic": [
                {
                  "key": "username",
                  "value": "admin",
                  "type": "string"
                },
                {
                  "key": "password",
                  "value": "{{admin_password}}",
                  "type": "string"
                }
              ]
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{notification_service_url}}/api/notifications/1",
              "host": ["{{notification_service_url}}"],
              "path": ["api", "notifications", "1"]
            },
            "description": "Get a specific notification by its ID."
          }
        },
        {
          "name": "Send Test Email",
          "request": {
            "auth": {
              "type": "basic",
              "basic": [
                {
                  "key": "username",
                  "value": "admin",
                  "type": "string"
                },
                {
                  "key": "password",
                  "value": "{{admin_password}}",
                  "type": "string"
                }
              ]
            },
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"test@example.com\",\n  \"username\": \"testuser\",\n  \"firstName\": \"Test\",\n  \"lastName\": \"User\"\n}"
            },
            "url": {
              "raw": "{{notification_service_url}}/api/notifications/test-email",
              "host": ["{{notification_service_url}}"],
              "path": ["api", "notifications", "test-email"]
            },
            "description": "Send a test email to verify email functionality."
          }
        },
        {
          "name": "Notification Service Health",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{notification_service_url}}/health",
              "host": ["{{notification_service_url}}"],
              "path": ["health"]
            },
            "description": "Check notification service health status."
          }
        }
      ]
    },
    {
      "name": "API Gateway",
      "description": "API Gateway health and fallback endpoints",
      "item": [
        {
          "name": "Gateway Health",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/health",
              "host": ["{{base_url}}"],
              "path": ["health"]
            },
            "description": "Check API Gateway health status."
          }
        },
        {
          "name": "Gateway Actuator Health",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/actuator/health",
              "host": ["{{base_url}}"],
              "path": ["actuator", "health"]
            },
            "description": "Check API Gateway actuator health endpoint."
          }
        }
      ]
    },
    {
      "name": "🔍 GraphQL",
      "description": "GraphQL queries and mutations for User Service",
      "item": [
        {
          "name": "GraphQL - Get All Users",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{jwt_token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"query\": \"query { users { id username email firstName lastName roles createdAt updatedAt isActive } }\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/graphql",
              "host": ["{{base_url}}"],
              "path": ["graphql"]
            },
            "description": "GraphQL query to get all users (Admin only)."
          }
        },
        {
          "name": "GraphQL - Get User by ID",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{jwt_token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"query\": \"query GetUser($id: Long!) { user(id: $id) { id username email firstName lastName roles createdAt updatedAt isActive } }\",\n  \"variables\": {\n    \"id\": 1\n  }\n}"
            },
            "url": {
              "raw": "{{base_url}}/graphql",
              "host": ["{{base_url}}"],
              "path": ["graphql"]
            },
            "description": "GraphQL query to get a specific user by ID."
          }
        },
        {
          "name": "GraphQL - Get User by Username",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{jwt_token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"query\": \"query GetUserByUsername($username: String!) { userByUsername(username: $username) { id username email firstName lastName roles createdAt updatedAt isActive } }\",\n  \"variables\": {\n    \"username\": \"admin\"\n  }\n}"
            },
            "url": {
              "raw": "{{base_url}}/graphql",
              "host": ["{{base_url}}"],
              "path": ["graphql"]
            },
            "description": "GraphQL query to get a specific user by username."
          }
        },
        {
          "name": "GraphQL - Create User",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{jwt_token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"query\": \"mutation CreateUser($input: CreateUserRequest!) { createUser(input: $input) { id username email firstName lastName roles createdAt updatedAt isActive } }\",\n  \"variables\": {\n    \"input\": {\n      \"username\": \"newuser\",\n      \"email\": \"newuser@example.com\",\n      \"firstName\": \"John\",\n      \"lastName\": \"Doe\",\n      \"password\": \"{{test_password}}\"\n    }\n  }\n}"
            },
            "url": {
              "raw": "{{base_url}}/graphql",
              "host": ["{{base_url}}"],
              "path": ["graphql"]
            },
            "description": "GraphQL mutation to create a new user (Admin only)."
          }
        },
        {
          "name": "GraphQL - Update User",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{jwt_token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"query\": \"mutation UpdateUser($id: Long!, $input: UpdateUserRequest!) { updateUser(id: $id, input: $input) { id username email firstName lastName roles createdAt updatedAt isActive } }\",\n  \"variables\": {\n    \"id\": 1,\n    \"input\": {\n      \"firstName\": \"Updated\",\n      \"lastName\": \"Name\",\n      \"email\": \"updated@example.com\"\n    }\n  }\n}"
            },
            "url": {
              "raw": "{{base_url}}/graphql",
              "host": ["{{base_url}}"],
              "path": ["graphql"]
            },
            "description": "GraphQL mutation to update a user."
          }
        }
      ]
    },
    {
      "name": "Health Checks",
      "description": "Health check endpoints for all services",
      "item": [
        {
          "name": "All Services Health Check",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/actuator/health",
              "host": ["{{base_url}}"],
              "path": ["actuator", "health"]
            },
            "description": "Check overall system health through API Gateway."
          }
        },
        {
          "name": "Auth Service Health",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{auth_service_url}}/actuator/health",
              "host": ["{{auth_service_url}}"],
              "path": ["actuator", "health"]
            },
            "description": "Direct health check for Auth Service."
          }
        },
        {
          "name": "User Service Health",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{user_service_url}}/actuator/health",
              "host": ["{{user_service_url}}"],
              "path": ["actuator", "health"]
            },
            "description": "Direct health check for User Service."
          }
        },
        {
          "name": "Notification Service Health",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{notification_service_url}}/actuator/health",
              "host": ["{{notification_service_url}}"],
              "path": ["actuator", "health"]
            },
            "description": "Direct health check for Notification Service."
          }
        }
      ]
    }
  ]
}
