# Docker Environment Configuration for Notification Service

spring:
  datasource:
    url: ${DB_URL}
    username: ${DB_USERNAME:notificationuser}
    password: ${DB_PASSWORD}
    driver-class-name: org.postgresql.Driver
    hikari:
      maximum-pool-size: 10
      minimum-idle: 3
      connection-timeout: 20000
      idle-timeout: 300000
      max-lifetime: 1200000

  jpa:
    hibernate:
      ddl-auto: create-drop
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect
    show-sql: false

  flyway:
    enabled: false
    # locations: classpath:db/migration
    # baseline-on-migrate: true

  kafka:
    bootstrap-servers: ${KAFKA_BOOTSTRAP_SERVERS}
    consumer:
      group-id: notification-service-dev
      auto-offset-reset: earliest
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      enable-auto-commit: false

  mail:
    host: ${MAIL_HOST:smtp.gmail.com}
    port: ${MAIL_PORT:587}
    username: ${MAIL_USERNAME:no-reply@example.com}
    password: ${MAIL_PASSWORD:?MAIL_PASSWORD required}
    properties:
      mail:
        smtp:
          auth: true
          starttls:
            enable: true
            required: true
          connectiontimeout: 10000
          timeout: 10000
          writetimeout: 10000
    default-encoding: UTF-8
    test-connection: false

  data:
    redis:
      host: ${REDIS_HOST}
      port: 6379
      password: ${REDIS_PASSWORD}

server:
  port: 8085

management:
  endpoints:
    web:
      base-path: /actuator
      exposure:
        include: health,info
  endpoint:
    health:
      show-details: always

# Kafka topic overrides for docker profile
kafka:
  topics:
    user-events: ${KAFKA_USER_EVENTS_TOPIC:user-events-dev}
    user-events-dlq: ${KAFKA_USER_EVENTS_DLQ_TOPIC:user-events-dlq-dev}

# Security configuration removed to disable Spring Security

internal:
  api:
    key: ${INTERNAL_API_KEY:?INTERNAL_API_KEY required}
