### User Service REST API Tests
### Requires a valid JWT token from Auth Service login
### Run these requests directly in IntelliJ IDEA or Postman

### ============================================
### VARIABLES
### ============================================



@baseUrl = http://localhost:8080
@contentType = application/json
#@authToken = {{authToken}}   # set automatically by Auth tests
@authToken = eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJzb3VyYXY3MiIsInJvbGUiOiJVU0VSIiwiaWF0IjoxNzU5NzgxMjgyLCJleHAiOjE3NTk3ODIxODJ9.szdr0cRc9bpDu3d4QyG4qH9V_3AEeaMBgKvApznJVRE9mDHrErK3fD9Jl0qwQCvCyjyDt8vwmrUFt3nvzZEUEA
### ============================================
### HEALTH CHECK (Public)
### ============================================

GET {{baseUrl}}/actuator/health
Accept: application/json

> {%
    client.test("Health check OK", function() {
        client.assert(response.status === 200, "Expected status 200");
    });
%}



### ============================================
### GET ALL USERS (Authenticated)
### ============================================

GET {{baseUrl}}/api/users
Accept: {{contentType}}
Authorization: Bearer {{authToken}}

> {%
    client.test("Fetched all users successfully", function() {
        client.assert(response.status === 200, "Expected status 200");
        client.assert(Array.isArray(response.body), "Response should be an array");
    });
%}

### ============================================
### GET ALL USERS (Authenticated)
### ============================================

GET {{baseUrl}}/api/users
Authorization: Bearer eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJzb3VyYXY3MiIsInJvbGUiOiJVU0VSIiwiaWF0IjoxNzU5NzgxNzczLCJleHAiOjE3NTk3ODI2NzN9.L5mkEGZUnLWDrm5xzkQlyvr5vYqCD6Zrrr1BgSnMC1ru4pfpKR0rNCpRQ8m4qOCFhPBZhKYVY_tq5pNZ0i29HQ
Accept: application/json

### ============================================
### GET USER BY ID
### ============================================

GET {{baseUrl}}/api/users/1
Accept: {{contentType}}
Authorization: Bearer {{authToken}}

GET {{baseUrl}}/api/users/2
Accept: {{contentType}}
Authorization: Bearer {{authToken}}

GET {{baseUrl}}/api/users/999
Accept: {{contentType}}
Authorization: Bearer {{authToken}}

### ============================================
### GET USER BY USERNAME
### ============================================

GET {{baseUrl}}/api/users/username/john_doe
Accept: {{contentType}}
Authorization: Bearer {{authToken}}

GET {{baseUrl}}/api/users/username/jane_smith
Accept: {{contentType}}
Authorization: Bearer {{authToken}}

GET {{baseUrl}}/api/users/username/nonexistent_user
Accept: {{contentType}}
Authorization: Bearer {{authToken}}

### ============================================
### CREATE USER
### ============================================

POST {{baseUrl}}/api/users
Content-Type: {{contentType}}
Authorization: Bearer {{authToken}}

{
  "username": "test_user_001",
  "email": "testuser001@example.com",
  "password": "securePassword123",
  "firstName": "Test",
  "lastName": "User",
  "phone": "+1-555-9001"
}

POST {{baseUrl}}/api/users
Content-Type: {{contentType}}
Authorization: Bearer {{authToken}}

{
  "username": "minimal_user",
  "email": "minimal@example.com",
  "password": "password123"
}

POST {{baseUrl}}/api/users
Content-Type: {{contentType}}
Authorization: Bearer {{authToken}}

{
  "username": "john_doe",
  "email": "another.email@example.com",
  "password": "password123",
  "firstName": "Another",
  "lastName": "User"
}

POST {{baseUrl}}/api/users
Content-Type: {{contentType}}
Authorization: Bearer {{authToken}}

{
  "username": "unique_username",
  "email": "john.doe@example.com",
  "password": "password123",
  "firstName": "Duplicate",
  "lastName": "Email"
}

POST {{baseUrl}}/api/users
Content-Type: {{contentType}}
Authorization: Bearer {{authToken}}

{
  "username": "invalid_email_user",
  "email": "not-an-email",
  "password": "password123",
  "firstName": "Invalid",
  "lastName": "Email"
}

POST {{baseUrl}}/api/users
Content-Type: {{contentType}}
Authorization: Bearer {{authToken}}

{
  "firstName": "Missing",
  "lastName": "Required"
}

POST {{baseUrl}}/api/users
Content-Type: {{contentType}}
Authorization: Bearer {{authToken}}

{
  "username": "short_pass_user",
  "email": "shortpass@example.com",
  "password": "12345",
  "firstName": "Short",
  "lastName": "Password"
}

### ============================================
### UPDATE USER
### ============================================

PUT {{baseUrl}}/api/users/1
Content-Type: {{contentType}}
Authorization: Bearer {{authToken}}

{
  "email": "john.doe.updated@example.com",
  "firstName": "Johnny",
  "lastName": "Doe Jr.",
  "phone": "+1-555-0199"
}

PUT {{baseUrl}}/api/users/2
Content-Type: {{contentType}}
Authorization: Bearer {{authToken}}

{
  "email": "jane.smith.new@example.com"
}

PUT {{baseUrl}}/api/users/3
Content-Type: {{contentType}}
Authorization: Bearer {{authToken}}

{
  "phone": "+1-555-7777"
}

PUT {{baseUrl}}/api/users/999
Content-Type: {{contentType}}
Authorization: Bearer {{authToken}}

{
  "email": "notfound@example.com",
  "firstName": "Not",
  "lastName": "Found"
}

PUT {{baseUrl}}/api/users/1
Content-Type: {{contentType}}
Authorization: Bearer {{authToken}}

{
  "email": "jane.smith@example.com"
}

PUT {{baseUrl}}/api/users/1
Content-Type: {{contentType}}
Authorization: Bearer {{authToken}}

{
  "email": "invalid-email-format"
}

### ============================================
### DELETE USER
### ============================================

DELETE {{baseUrl}}/api/users/10
Accept: {{contentType}}
Authorization: Bearer {{authToken}}

DELETE {{baseUrl}}/api/users/999
Accept: {{contentType}}
Authorization: Bearer {{authToken}}

### ============================================
### CRUD SEQUENCE TEST
### ============================================

POST {{baseUrl}}/api/users
Content-Type: {{contentType}}
Authorization: Bearer {{authToken}}

{
  "username": "crud_test_user",
  "email": "crudtest@example.com",
  "password": "password123",
  "firstName": "CRUD",
  "lastName": "Test",
  "phone": "+1-555-CRUD"
}

> {%
    client.test("User created successfully", function() {
        client.assert(response.status === 201, "Expected 201");
        client.global.set("createdUserId", response.body.id);
    });
%}

###

GET {{baseUrl}}/api/users/{{createdUserId}}
Accept: {{contentType}}
Authorization: Bearer {{authToken}}

> {%
    client.test("User retrieved successfully", function() {
        client.assert(response.status === 200, "Expected 200");
    });
%}

###

PUT {{baseUrl}}/api/users/{{createdUserId}}
Content-Type: {{contentType}}
Authorization: Bearer {{authToken}}

{
  "email": "crudtest.updated@example.com",
  "firstName": "CRUD Updated",
  "phone": "+1-555-9999"
}

> {%
    client.test("User updated successfully", function() {
        client.assert(response.status === 200, "Expected 200");
    });
%}

###

DELETE {{baseUrl}}/api/users/{{createdUserId}}
Authorization: Bearer {{authToken}}

> {%
    client.test("User deleted successfully", function() {
        client.assert(response.status === 204, "Expected 204");
    });
%}

###

GET {{baseUrl}}/api/users/{{createdUserId}}
Accept: {{contentType}}
Authorization: Bearer {{authToken}}

> {%
    client.test("User not found after deletion", function() {
        client.assert(response.status === 404, "Expected 404");
    });
%}

### ============================================
### PERFORMANCE TESTS
### ============================================

GET {{baseUrl}}/api/users
Accept: {{contentType}}
Authorization: Bearer {{authToken}}


GET {{baseUrl}}/api/users
Accept: {{contentType}}
Authorization: Bearer {{authToken}}

GET {{baseUrl}}/api/users
Accept: {{contentType}}
Authorization: Bearer {{authToken}}

### ============================================
### ERROR HANDLING TESTS
### ============================================

GET {{baseUrl}}/api/invalid-endpoint
Accept: {{contentType}}
Authorization: Bearer {{authToken}}

PATCH {{baseUrl}}/api/users/1
Content-Type: {{contentType}}
Authorization: Bearer {{authToken}}

{
  "email": "test@example.com"
}

POST {{baseUrl}}/api/users
Content-Type: {{contentType}}
Authorization: Bearer {{authToken}}

{
  "username": "test",
  "email": "test@example.com",
  "password": "password123"
  // missing comma
}

POST {{baseUrl}}/api/users
Content-Type: {{contentType}}
Authorization: Bearer {{authToken}}

{}

